# -*- coding: utf-8 -*-
"""
Created on Sun May 19 09:26:01 2019

@author: 15201002 Arif Shahriar
"""

import pandas as pd
import numpy as np


dataset=pd.read_csv("Thesis_responses_Scaled.csv")

print(dataset.head())

x=dataset.iloc[:,1:60].values
y=dataset.Flag.values

print(y)
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

from sklearn.ensemble import RandomForestClassifier

#n_estimators 20 less accuracy 30 better accuracy
#n_estimator indicates number of trees in forest
classifier=RandomForestClassifier(n_estimators=20, random_state=42) 
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))
print("Accuracy Score is ",accuracy_score(y_test,y_pred))
print(classifier.feature_importances_)

print("-----------------------Graph Part-----------------------------")

cm=confusion_matrix(y_test,y_pred)
tn=cm[0,0]
fp=cm[0,1]
fn=cm[1,0]
tp=cm[1,1]
print('Sensitivity:',tp/(tp+fn))
print('Specificity:',tn/(tn+fp))
print('Precision:',tp/(tp+fp))
print('Negative predictive value:',tn/(tn+fn))
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))
from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
fpr=dict()
tpr=dict()
roc_auc=dict()
fpr[0],tpr[0],_=roc_curve(y_test,y_pred)
roc_auc[0]=auc(fpr[0],tpr[0])

fpr["micro"],tpr["micro"],_=roc_curve(y_test.ravel(),y_pred.ravel())
roc_auc["micro"]=auc(fpr["micro"],tpr["micro"])

plt.figure()
lw = 2
plt.plot(fpr[0], tpr[0], color='darkorange',
         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[0])
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc="lower right")
plt.show()
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))
