# -*- coding: utf-8 -*-
"""
Created on Mon May 20 09:04:40 2019

@author: Arif Shahriar 15201002
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#%matplotlib inline

sampleData=pd.read_csv("Thesis_responses_Scaled.csv");

print(sampleData.shape)

print(sampleData.head)

X=sampleData.drop(['Timestamp','Flag','ID','Rehab'],axis=1)
y=sampleData['Flag']

#dataset=pd.read_csv("Alpha_Test.csv")
#
#print(dataset.head())
#X=dataset.iloc[:,0:40].values
#y=dataset.iloc[:,40].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)

print(X_test)
print(y_train)

from sklearn.svm import SVC  
svcClassifier = SVC(kernel='linear')  
svcClassifier.fit(X_train, y_train) 

y_pred=svcClassifier.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix,matthews_corrcoef,cohen_kappa_score
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))
print("Cohen Kappa score is",cohen_kappa_score(y_test,y_pred))
print("The Matthews correlation coefficient ",matthews_corrcoef(y_test,y_pred))


print("-----------------------Graph Part-----------------------------")

cm=confusion_matrix(y_test,y_pred)
tn=cm[0,0]
fp=cm[0,1]
fn=cm[1,0]
tp=cm[1,1]
print('Sensitivity:',tp/(tp+fn))
print('Specificity:',tn/(tn+fp))
print('Precision:',tp/(tp+fp))
print('Negative predictive value:',tn/(tn+fn))
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))
from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
fpr=dict()
tpr=dict()
roc_auc=dict()
fpr[0],tpr[0],_=roc_curve(y_test,y_pred)
roc_auc[0]=auc(fpr[0],tpr[0])

fpr["micro"],tpr["micro"],_=roc_curve(y_test.ravel(),y_pred.ravel())
roc_auc["micro"]=auc(fpr["micro"],tpr["micro"])

plt.figure()
lw = 2
plt.plot(fpr[0], tpr[0], color='darkorange',
         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[0])
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic of SVM')
plt.legend(loc="lower right")
plt.show()
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))

