# -*- coding: utf-8 -*-
"""
Created on Fri May 31 09:17:47 2019

@author: Arif 15201002
"""
from skfeature.function.information_theoretical_based import LCSI


def mrmr(X, y, **kwargs):
    """
    This function implements the MRMR feature selection
    Input
    -----
    X: {numpy array}, shape (n_samples, n_features)
        input data, guaranteed to be discrete
    y: {numpy array}, shape (n_samples,)
        input class labels
    kwargs: {dictionary}
        n_selected_features: {int}
            number of features to select
    Output
    ------
    F: {numpy array}, shape (n_features,)
        index of selected features, F[0] is the most important feature
    J_CMI: {numpy array}, shape: (n_features,)
        corresponding objective function value of selected features
    MIfy: {numpy array}, shape: (n_features,)
        corresponding mutual information between selected features and response
    Reference
    ---------
    Brown, Gavin et al. "Conditional Likelihood Maximisation: A Unifying Framework for Information Theoretic Feature Selection." JMLR 2012.
    """
    if 'n_selected_features' in kwargs.keys():
        n_selected_features = kwargs['n_selected_features']
        F, J_CMI, MIfy = LCSI.lcsi(X, y, gamma=0, function_name='MRMR', n_selected_features=n_selected_features)
    else:
        F, J_CMI, MIfy = LCSI.lcsi(X, y, gamma=0, function_name='MRMR')
    return F, J_CMI, MIfy

import numpy as np
import pandas as pd

df = pd.read_csv('Thesis_responses_Scaled.csv')
X = df.iloc[:,1:60].values
Y = df.Flag.values

data = pd.read_csv("data.csv") 

array1,array2,array3=mrmr(X,Y)

sLength=len(array1)

print("corresponding mutual information between selected features and response, numbers ",sLength)
for i in range(sLength):
    print(array1[i],"->",df.columns.values[array1[i]])
    print(array3[i])
    
print("corresponding objective function value of selected features",array2)