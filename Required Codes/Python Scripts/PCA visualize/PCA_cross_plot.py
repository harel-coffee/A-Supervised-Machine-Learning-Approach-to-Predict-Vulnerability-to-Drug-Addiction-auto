# -*- coding: utf-8 -*-
"""
Created on Sat Jul 27 12:45:11 2019

@author: user
"""
#initializing PCA
from sklearn import decomposition
pca=decomposition.PCA()
import pandas as pd
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
data=pd.read_csv('data.csv')

#configure the parameters
#number of componenets = 2
labels=data['Flag']
#data=data.drop(['Timestamp','Flag','ID','Rehab'],axis=1)
data=data.drop(['Timestamp','Flag','ID','Rehab','1.gender','2. medium of study ','3.education','4.nationality','5.religion','6.family members','28.A)Depression, sorrow and hopelessness','28.B) Anxiety,irritated','28.C) Hallucinations, see imaginary things, hear voices','28.D) Lack of attention/ memorization problem','34.B) Sedative (Sleeping Pills, Alcohol)','34.C) Depressant (Heroin, Fencidil)','34.D) Hallucinogen (LSD, Piot)','33.ever used any substance without the doc\'s permission'],axis=1)
feature_names = list(data.columns.values)
print(feature_names)

#scaler=StandardScaler()
#scaler.fit(data)
## compute the mean and standard which will be used in the next command
#X_scaled=scaler.transform(data)
## fit and transform can be applied together and I leave that for simple exercise

pca.n_components=2
pca_data=pca.fit_transform(data)

Xax=pca_data[:,0]
Yax=pca_data[:,1]
cdict={0:'red',1:'green'}
labl={0:'Sober',1:'Addicted'}
marker={0:'*',1:'o'}
alpha={0:.3, 1:.5}
fig,ax=plt.subplots(figsize=(7,5))
fig.patch.set_facecolor('white')
for l in np.unique(labels):
 ix=np.where(labels==l)
 ax.scatter(Xax[ix],Yax[ix],c=cdict[l],s=40,
           label=labl[l],marker=marker[l],alpha=alpha[l])
# for loop ends
plt.xlabel("First Principal Component",fontsize=14)
plt.ylabel("Second Principal Component",fontsize=14)
plt.legend()
plt.show()
# please check the scatter plot of the remaining component and you will understand the difference

plt.matshow(pca.components_,cmap='viridis')
plt.yticks([0,1],['1st Comp','2nd Comp'],fontsize=10)
plt.colorbar()
plt.xticks(range(len(feature_names)),feature_names,rotation=65,ha='left')
plt.tight_layout()
plt.show()# 