# -*- coding: utf-8 -*-
"""
Created on Thu Jun 13 09:07:57 2019

@author: Arif Shahriar 15201002
"""
from skfeature.function.information_theoretical_based import LCSI
import matplotlib.pyplot as plt
import numpy as np

    
# main program starts here

def mRMR(X, y, **kwargs):
    """
    This function implements the MRMR feature selection

    Input
    -----
    X: {numpy array}, shape (n_samples, n_features)
        input data, guaranteed to be discrete
    y: {numpy array}, shape (n_samples,)
        input class labels
    kwargs: {dictionary}
        n_selected_features: {int}
            number of features to select

    Output
    ------
    F: {numpy array}, shape (n_features,)
        index of selected features, F[0] is the most important feature
    J_CMI: {numpy array}, shape: (n_features,)
        corresponding objective function value of selected features
    MIfy: {numpy array}, shape: (n_features,)
        corresponding mutual information between selected features and response

    Reference
    ---------
    Brown, Gavin et al. "Conditional Likelihood Maximisation: A Unifying Framework for Information Theoretic Feature Selection." JMLR 2012.
    """
    if 'n_selected_features' in kwargs.keys():
        n_selected_features = kwargs['n_selected_features']
        F, J_CMI, MIfy = LCSI.lcsi(X, y, gamma=0, function_name='MRMR', n_selected_features=n_selected_features)
    else:
        F, J_CMI, MIfy = LCSI.lcsi(X, y, gamma=0, function_name='MRMR')
    return F, J_CMI, MIfy

import numpy as np  
import matplotlib.pyplot as plt  
import pandas as pd  
import warnings
warnings.filterwarnings('ignore')

data=pd.read_csv('Pymrmr_modified.csv')
#print(data.head)

X=data.iloc[:,1:58].values
#X=X.drop(['Gender','Occupation'],axis=1).values
y=data.Flag.values
#y=data.iloc[:,50].values
print(y)


keywords = {'n_selected_features': 10}
index,functionValues,mutualInfo=mRMR(X,y,**keywords)

print("The number of Selected Features is",index.size)
print("Features are given below: ")
print(index)
colName=list(data.columns)
#print(colName)
name=[]

for i in range(index.size):
    x=colName[index[i]+1]
#    print(colName[index[i]+1])
    name.append(x)

print(name)
print("Function Values are given below: ")
print(functionValues)
print("Corresponding Mutual Information are given below: ")
print(mutualInfo)


import numpy as np
import matplotlib.pyplot as plt

#objects = ('Python', 'C++', 'Java', 'Perl', 'Scala', 'Lisp')
y_pos = np.arange(len(name))
#performance = [10,8,6,4,2,1]

plt.rcParams.update({'font.size': 12})
plt.figure(figsize=(9,8))
plt.barh(y_pos, mutualInfo,align='center',color=['black', 'red', 'green', 'blue', 'maroon'],alpha=0.5)
plt.yticks(y_pos, name)
plt.xlabel('Mutual Information')
plt.title('Mutual Information of features')

plt.show()