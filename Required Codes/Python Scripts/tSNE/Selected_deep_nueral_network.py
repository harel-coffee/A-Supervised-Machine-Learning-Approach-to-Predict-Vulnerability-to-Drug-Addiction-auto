# -*- coding: utf-8 -*-
"""
Created on Wed Jun 12 17:52:27 2019

@author: 15201002 Arif Shahriar
"""
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')


dataset=pd.read_csv("Selected_tSNE.csv")

print(dataset.head())

X=dataset.iloc[:,1:4]
#x=dataset.drop(['Timestamp','Flag','ID','Nationality','Religion','Gender'],axis=1)

#print(x[3][48])
y=dataset.Flag

print(y)

from sklearn.model_selection import train_test_split

# Split the data up in train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Import `StandardScaler` from `sklearn.preprocessing`
from sklearn.preprocessing import StandardScaler

# Define the scaler 
scaler = StandardScaler()

# Scale the train set
X_train = scaler.fit_transform(X_train)

# Scale the test set
X_test = scaler.fit_transform(X_test)

# Import `Sequential` from `keras.models`
from keras.models import Sequential

# Import `Dense` from `keras.layers`
from keras.layers import Dense

# Initialize the constructor
model = Sequential()

# Add an input layer 
model.add(Dense(30, activation='relu', input_shape=(3,)))

# Add multiple hidden layer 
model.add(Dense(12, activation='relu'))

# Add an output layer 
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
                   
model.fit(X_train, y_train,epochs=50, batch_size=1, verbose=1)

y_pred = model.predict(X_test)

score = model.evaluate(X_test, y_test,verbose=1)

print(score)

# Confusion matrix
from sklearn.metrics import classification_report,confusion_matrix
cm=confusion_matrix(y_test, y_pred.round())
print(classification_report(y_test,y_pred.round()))
tn=cm[0,0]
fp=cm[0,1]
fn=cm[1,0]
tp=cm[1,1]
print('Sensitivity:',tp/(tp+fn))
print('Specificity:',tn/(tn+fp))
print('Precision:',tp/(tp+fp))
print('Negative predictive value:',tn/(tn+fn))
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))


