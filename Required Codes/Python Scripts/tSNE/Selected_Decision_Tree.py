# -*- coding: utf-8 -*-
"""
Created on Wed Jun 12 18:10:03 2019

@author: Arif 15201002
"""
from pandas import read_csv 
from sklearn import tree 

dataset=read_csv("Selected_tSNE.csv")

print(dataset.head())
x=dataset.iloc[:,1:3]
#x=dataset.drop(['Timestamp','Flag','ID','Nationality','Religion','Gender'],axis=1)

#print(x[3][48])
y=dataset.Flag
print(y)

decisionTreeClassifier = tree.DecisionTreeClassifier(criterion="entropy", max_depth=5) 


#print(dTree)
# 

# Split the data into Training and Testing set
from sklearn.cross_validation import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=0)

dTree = decisionTreeClassifier.fit(x_train, y_train) 
dotData = tree.export_graphviz(dTree, out_file=None) 
print(dotData) 
# Feature scaling
#from sklearn.preprocessing import StandardScaler
#sc = StandardScaler()
#
#x_train = sc.fit_transform(x_train)
#x_test = sc.fit_transform(x_test)
#print(x_test)


#print(x_train)
#print(x_test)

# Predicting the Test set results
y_pred = decisionTreeClassifier.predict(x_test)

# Making the confusion matrix 
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)

print(cm)

tn=cm[0,0]
fp=cm[0,1]
fn=cm[1,0]
tp=cm[1,1]

print('Sensitivity=',(tp*100)/(tp+fn))
print('Specificity=',(tn*100)/(tn+fp))
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))

print("-----------------------Graph Part-----------------------------")

from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
fpr=dict()
tpr=dict()
roc_auc=dict()
fpr[0],tpr[0],_=roc_curve(y_test,y_pred)
roc_auc[0]=auc(fpr[0],tpr[0])

fpr["micro"],tpr["micro"],_=roc_curve(y_test.ravel(),y_pred.ravel())
roc_auc["micro"]=auc(fpr["micro"],tpr["micro"])

plt.figure()
lw = 2
plt.plot(fpr[0], tpr[0], color='darkorange',
         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[0])
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc="lower right")
plt.show()
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))

