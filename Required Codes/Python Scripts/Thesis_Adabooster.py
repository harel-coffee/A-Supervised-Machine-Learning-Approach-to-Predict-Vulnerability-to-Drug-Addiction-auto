# -*- coding: utf-8 -*-
"""
Created on Sat Aug  3 09:54:24 2019

@author: 15201002 Arif Shahriar
"""

# Load libraries
from sklearn.ensemble import AdaBoostClassifier
import pandas as pd

#import train-test split
from sklearn.model_selection import train_test_split

#import scikit-learn metrics module for accuracy calculation
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,matthews_corrcoef

data=pd.read_csv('Thesis_responses_Scaled.csv')

X=data.iloc[:,1:60].values
y=data.Flag.values

#split data into training and test set
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)
#70% train and 30% test

#crearte AdaBoost classifier object
adaClass=AdaBoostClassifier(n_estimators=56,learning_rate=1)

#train Adaboost classifier
model=adaClass.fit(X_train,y_train)

#Predict response for test data set
y_pred=model.predict(X_test)

print(accuracy_score(y_test,y_pred))
print(classification_report(y_test,y_pred))
 
#ROC curve and report
cm=confusion_matrix(y_test, y_pred.round())
print(classification_report(y_test,y_pred.round()))
print("The Matthews correlation coefficient ",matthews_corrcoef(y_test,y_pred.round()))
print(cm)
tn=cm[0,0]
fp=cm[0,1]
fn=cm[1,0]
tp=cm[1,1]
print('Sensitivity:',tp/(tp+fn))
print('Specificity:',tn/(tn+fp))
print('Precision:',tp/(tp+fp))
print('Negative predictive value:',tn/(tn+fn))
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))

from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
fpr=dict()
tpr=dict()
roc_auc=dict()
fpr[0],tpr[0],_=roc_curve(y_test,y_pred)
roc_auc[0]=auc(fpr[0],tpr[0])

fpr["micro"],tpr["micro"],_=roc_curve(y_test.ravel(),y_pred.ravel())
roc_auc["micro"]=auc(fpr["micro"],tpr["micro"])

plt.figure()
lw = 2
plt.plot(fpr[0], tpr[0], color='darkorange',
         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[0])
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc="lower right")
plt.show()
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))

from sklearn.ensemble import AdaBoostClassifier

# Import Support Vector Classifier
from sklearn.svm import SVC
#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
svc=SVC(probability=True, kernel='linear')

# Create adaboost classifer object
abc =AdaBoostClassifier(n_estimators=50, base_estimator=svc,learning_rate=1)

# Train Adaboost Classifer
model = abc.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = model.predict(X_test)


# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))