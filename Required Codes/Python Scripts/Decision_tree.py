# -*- coding: utf-8 -*-
"""
Created on Wed May 29 12:30:58 2019

@author: 15201002
"""
from pandas import read_csv 
from sklearn import tree 
import numpy as np
import warnings
warnings.filterwarnings('ignore')

#dataset=read_csv("Alpha_Test.csv")
#
#print(dataset.head())
#X=dataset.iloc[:,0:40].values
#Y=dataset.Flag.values

data = read_csv("Thesis_responses_Scaled.csv")  
X = data.iloc[:,1:60].values
Y = data.Flag.values
print(Y)
print(data.head())
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)

#from sklearn.preprocessing import StandardScaler
#sc=StandardScaler()
#
#x_train=sc.fit_transform(x_train)
#x_test=sc.fit_transform(x_test)

from sklearn.tree import DecisionTreeClassifier
classifier=DecisionTreeClassifier(criterion="entropy", max_depth=5)
classifier.fit(x_train,y_train)


y_pred=classifier.predict(x_test)

from sklearn.metrics import confusion_matrix,classification_report
cm=confusion_matrix(y_test,y_pred)
print(confusion_matrix(y_test, y_pred))  
print(classification_report(y_test, y_pred)) 

print("-----------------------Graph Part-----------------------------")

cm=confusion_matrix(y_test,y_pred)
tn=cm[0,0]
fp=cm[0,1]
fn=cm[1,0]
tp=cm[1,1]
print('Sensitivity:',tp/(tp+fn))
print('Specificity:',tn/(tn+fp))
print('Precision:',tp/(tp+fp))
print('Negative predictive value:',tn/(tn+fn))
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))

from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
fpr=dict()
tpr=dict()
roc_auc=dict()
fpr[0],tpr[0],_=roc_curve(y_test,y_pred)
roc_auc[0]=auc(fpr[0],tpr[0])


fpr["micro"],tpr["micro"],_=roc_curve(y_test.ravel(),y_pred.ravel())
roc_auc["micro"]=auc(fpr["micro"],tpr["micro"])

plt.figure()
lw = 2
plt.plot(fpr[0], tpr[0], color='darkorange',
         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[0])
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc="lower right")
plt.show()
