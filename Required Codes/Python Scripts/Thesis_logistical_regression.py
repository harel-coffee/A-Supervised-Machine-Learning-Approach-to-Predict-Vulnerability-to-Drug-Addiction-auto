# -*- coding: utf-8 -*-
"""
Created on Sat May 18 08:54:16 2019

@author: Arif Shahriar 15201002
"""
import time
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

#dataset=pd.read_csv("Alpha_Test.csv")
#
#print(dataset.head())
#x=dataset.iloc[:,0:40].values
#y=dataset.Flag.values
data=pd.read_csv('Thesis_responses_Scaled.csv')

x=data.iloc[:,1:60].values
y=data.Flag.values
print(y)

start=time.time()
from sklearn.cross_validation import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)
#print(x_test)

from sklearn.linear_model import LogisticRegression 
classifier=LogisticRegression(random_state=0)
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)
y_score=classifier.fit(x_train,y_train).decision_function(x_test)
#print(y_pred)

end=time.time()
print("required time",end-start)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)

#print(cm)
print(sum(y_test))

from sklearn.metrics import accuracy_score,classification_report
print(accuracy_score(y_test,y_pred))
print(classification_report(y_test,y_pred))


#My part
tn=cm[0,0]
fp=cm[0,1]
fn=cm[1,0]
tp=cm[1,1]
print('Sensitivity:',tp/(tp+fn))
print('Specificity:',tn/(tn+fp))
print('Precision:',tp/(tp+fp))
print('Negative predictive value:',tn/(tn+fn))
print('Accuracy=',((tn+tp)*100)/(tn+tp+fn+fp))
print(cm)
TPR=tp/(tp+fn)
FPR=fp/(fp+tn)
print(TPR,FPR)

from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
fpr=dict()
tpr=dict()
roc_auc=dict()
fpr[0],tpr[0],_=roc_curve(y_test,y_score)
roc_auc[0]=auc(fpr[0],tpr[0])

fpr["micro"],tpr["micro"],_=roc_curve(y_test.ravel(),y_score.ravel())
roc_auc["micro"]=auc(fpr["micro"],tpr["micro"])

plt.figure()
lw = 2
plt.plot(fpr[0], tpr[0], color='darkorange',
         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[0])
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc="lower right")
plt.show()



